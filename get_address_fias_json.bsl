// 1С: Получение адреса ФИАС сервис 1С (УФ)

//////////////////////////////
// Модуль формы
//////////////////////////////
&НаСервере
Функция ПолучитьФИАСНаСервере(Адрес, Логин, Пароль)	
	тТаблФИАС = РеквизитФормыВЗначение("ТаблФИАС");
	тТаблФИАС.Очистить();
	Обработка = РеквизитФормыВЗначение("Объект"); 
	РезультатЗапроса = Обработка.ПолучитьАдресПоФИАС_Сервис1С(Адрес, Логин, Пароль);
	Ошибка = "";
	Если  РезультатЗапроса.Отказ Тогда
		Ошибка = РезультатЗапроса.ПодробноеПредставлениеОшибки;
	Иначе
		Данные = РезультатЗапроса.Данные;
		Если Данные.Количество() > 0 Тогда
			ТекДанные = Данные[0];
			Если ТекДанные.АдресПроверен Тогда
				Если ТекДанные.Варианты.Количество() > 0 Тогда	
					Для Каждого КлючЗначение Из ТекДанные.Варианты[0] Цикл  
					    ЗаполнитьЗначенияСвойств(тТаблФИАС.Добавить(),КлючЗначение);
					КонецЦикла;
				Иначе	
					Ошибка = "Адрес в ФИАС не найден";
				КонецЕсли;
			ИначеЕсли ТекДанные.Ошибки.Количество() > 0 Тогда
				ОписОшибки = ТекДанные.Ошибки[0];
				Ошибка = ОписОшибки.Текст;
			Иначе	
				Ошибка = "Адрес в ФИАС не найден";	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(тТаблФИАС, "ТаблФИАС");
	Возврат Ошибка;
КонецФункции

&НаКлиенте
Процедура ПолучитьФИАС(Команда) //кнопка формы
	Ошибка = ПолучитьФИАСНаСервере(Адрес, Логин, Пароль);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	Адрес = ",119019, Москва г, , , , Арбатская пл, 1, , 3, дом, корпус, кв.";
	ПримерАдреса = ",119019, Москва г, , , , Арбатская пл, 1, , 3, дом, корпус, кв.";
КонецПроцедуры



// 1С: Получение адреса ФИАС сервис1С (УФ)
//////////////////////////////
// Модуль объекта
//////////////////////////////
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;

	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");

	ПараметрыРегистрации.Вставить("Наименование", "Адрес. JSON");
	ПараметрыРегистрации.Вставить("Версия", "v 1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", "Адрес. JSON");

	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Подсистема.ДокументыИФайлы");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);

	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Идентификатор");
	тз.Колонки.Добавить("Использование");
	тз.Колонки.Добавить("Представление");
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.Идентификатор = "ОткрытьОбработку";
	НоваяСтрока.Использование = "ОткрытиеФормы";
	НоваяСтрока.Представление = "Адрес. JSON";

	ПараметрыРегистрации.Вставить("Команды", тз);
	
	Возврат ПараметрыРегистрации;

КонецФункции

Функция ПолучитьАдресПоФИАС_Сервис1С(АдресСтр, Логин, Пароль) Экспорт
	Результат = Новый Структура("Данные,Отказ,ПодробноеПредставлениеОшибки,КраткоеПредставлениеОшибки", Новый Массив,Ложь,"Информация об ошибке отсутствует","");	
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ПодробноеПредставлениеОшибки");
	Результат.Вставить("КраткоеПредставлениеОшибки");
	
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Попытка
		Сервис = Новый HTTPСоединение("api.orgaddress.1c.ru",,Логин,Пароль,,120,ЗащищенноеСоединение);
	Исключение
		Результат.Отказ = Истина;
		Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.КраткоеПредставлениеОшибки = "Не удалось установить соединение с сервисом 1С проверки адреса.";
		Возврат Результат;
	КонецПопытки;
	
	ПрефиксВерсииЗапроса = "rest/v2/";
	
	HTTPЗапрос = Новый HTTPЗапрос(ПрефиксВерсииЗапроса + "verify");
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	
	АдресДляПроверки = Новый Структура();
	АдресДляПроверки.Вставить("key", "result");
	АдресДляПроверки.Вставить("typeToVerify", "ADMINISTRATIVE");
	АдресДляПроверки.Вставить("addressToVerify", ПолучитьАдресДляДляПередачиВСервис(АдресСтр));
	
	ДанныеЗапроса = Новый Массив;
	ДанныеЗапроса.Добавить(АдресДляПроверки);
	ДанныеДляЗапроса = Новый Структура("requests", ДанныеЗапроса);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("X-1C-Request-UID", ИдентификаторЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьJSON(ДанныеДляЗапроса));
	
	Попытка
		РезультатПроверки = Сервис.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.Отказ = Истина;
		Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.КраткоеПредставлениеОшибки = "При получении данных из веб-сервиса возникли проблемы.";
		Возврат Результат;
	КонецПопытки;
	
	Результат.Отказ = Ложь;
	АдресПроверен   = Ложь;
	ПолученныеДанные = РезультатПроверки.ПолучитьТелоКакСтроку("UTF-8");
	
	Если РезультатПроверки.КодСостояния = 200 Тогда	
		ДанныеПроверки = fooReadJSON(ПолученныеДанные);	
	ИначеЕсли РезультатПроверки.КодСостояния = 400 Тогда	
		Результат.ПодробноеПредставлениеОшибки = ПолученныеДанные;
		Результат.КраткоеПредставлениеОшибки = "Не указан регион";
		Результат.Отказ = Истина;
	Иначе
		Результат.КраткоеПредставлениеОшибки = "Проверка адреса не доступна по причине:
					           |- не подключена интернет-поддержка пользователей;
					           |- неполадки у интернет-провайдера;
					           |- подключение к серверу блокирует межсетевой экран, 
					           |  антивирусная программа или другое программное обеспечение;
					           |- веб-сервис отключен или на техническом обслуживании.";
		Результат.ПодробноеПредставлениеОшибки = ПолученныеДанные;
		
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеПроверки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Проверка Из ДанныеПроверки Цикл
		
		ЭлементПроверки = Проверка.Значение;
		
		РезультатПроверки = Новый Структура();
		РезультатПроверки.Вставить("id", "");
		РезультатПроверки.Вставить("АдресПроверен", Ложь);
		РезультатПроверки.Вставить("Варианты", Новый Массив);
		РезультатПроверки.Вставить("Ошибки", Новый Массив);
		
		РезультатПроверки.id = Проверка.Ключ;
		
		Если ЭлементПроверки.Свойство("status") Тогда
			РезультатПроверки.АдресПроверен = (ЭлементПроверки.status="COMPLETELY_VERIFIED");
		КонецЕсли;
		
		Если ЭлементПроверки.Свойство("errorMessage") И ЗначениеЗаполнено(ЭлементПроверки.errorMessage) и ЭлементПроверки.errorMessage<>"null" Тогда
			ОписаниеОшибки = Новый Структура("Ключ,Текст,Подсказка");
			ОписаниеОшибки.Ключ  = ЭлементПроверки.errorCode;
			ОписаниеОшибки.Текст = ЭлементПроверки.errorMessage;
			РезультатПроверки.Ошибки.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
		Если ЭлементПроверки.Свойство("value") И ЗначениеЗаполнено(ЭлементПроверки.value) Тогда
			РезультатПроверки.Варианты.Добавить(ЭлементПроверки.value);
		КонецЕсли;
		
		Результат.Данные.Добавить(РезультатПроверки);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьАдресДляДляПередачиВСервис(СтроковыйАдрес)	
	Адрес = Новый Структура;
	Адрес.Вставить("ZIPcode"); 
	Адрес.Вставить("apartments"); 
	Адрес.Вставить("area");
	Адрес.Вставить("areaCode");
	Адрес.Вставить("areaId");
	Адрес.Вставить("areaType");
	Адрес.Вставить("buildings"); 
	Адрес.Вставить("city");
	Адрес.Вставить("cityDistrict");
	Адрес.Вставить("cityDistrictId");
	Адрес.Вставить("cityDistrictType");
	Адрес.Вставить("cityId");
	Адрес.Вставить("cityType");
	Адрес.Вставить("codeKLADR"); 
	Адрес.Вставить("district");
	Адрес.Вставить("districtId");
	Адрес.Вставить("districtType");
	Адрес.Вставить("houseId");
	Адрес.Вставить("houseType");
	Адрес.Вставить("houseNumber"); 
	Адрес.Вставить("id");
	Адрес.Вставить("ifnsFlAreaCode");
	Адрес.Вставить("ifnsFlCode");
	Адрес.Вставить("ifnsUlAreaCode");
	Адрес.Вставить("ifnsUlCode");
	Адрес.Вставить("locality");
	Адрес.Вставить("localityId");
	Адрес.Вставить("localityType");
	Адрес.Вставить("munDistrict");
	Адрес.Вставить("munDistrictId");
	Адрес.Вставить("munDistrictType");
	Адрес.Вставить("okato");
	Адрес.Вставить("oktmo");
	Адрес.Вставить("settlement");
	Адрес.Вставить("settlementId");
	Адрес.Вставить("settlementType");
	Адрес.Вставить("street");
	Адрес.Вставить("streetId");
	Адрес.Вставить("streetType");
	Адрес.Вставить("territory");
	Адрес.Вставить("territoryId");
	Адрес.Вставить("territoryType");
	Адрес.Вставить("value");
	
	ЗаполнитьСтруктуруАдресаИзСтроки(Адрес, СтроковыйАдрес);
	
	Возврат Адрес;
КонецФункции

Функция fooReadJSON (ТекстJSON)Экспорт
	Результат = Новый Структура;
	ТекстJSON = СтрЗаменить(ТекстJSON, """", ""); // а теперь удалим все кавычки     ?
	
	ТекстJSON = СокрЛП(ТекстJSON);
	
	Если Лев(ТекстJSON, 1) = "{" Тогда  // начало объекта
		
		ОбработатьJSON(Результат, ТекстJSON, "Структура");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //начало массива
		
		МассивДанных = Новый Массив;
		ОбработатьJSON(МассивДанных, ТекстJSON, "Массив");
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ОбработатьJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2)); // удалим открывающий символ структуры(массива)
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		
		Если ПервыйСимвол = "{" Тогда //вложенная структура
			
			Значение = Новый Структура;
			ОбработатьJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "[" Тогда //вложенный массив
			
			Значение = Новый Массив;
			ОбработатьJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
				
			Иначе
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда //структура закончилась
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда //массив закончился
			
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			
			Если Лев(ТекстJSON, 1) = "," Тогда
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
				
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				
				Если Поз = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз - 1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения, """", "");
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда //значение является структурой
					
					Значение = Новый Структура;
					ОбработатьJSON(Значение, ТекстJSON, "Структура");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //значение является массивом
					
					Значение = Новый Массив;
					ОбработатьJSON(Значение, ТекстJSON, "Массив");
					
				Иначе // обычное значение
					
					ПервыйКавычка = Ложь;
					ПредпоследнийКавычка = Ложь;
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						
						Если Символ = """" Тогда
							
							Если ПервыйКавычка Тогда
								
								ПредпоследнийКавычка = Истина;
								
							Иначе
								ПервыйКавычка = Истина;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если (Символ = "," И ((ПервыйКавычка И ПредпоследнийКавычка) Или (Не ПервыйКавычка И Не ПредпоследнийКавычка))) ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							
							Поз = Сч;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если Поз = 0 Тогда
						
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						
						Значение = Лев(ТекстJSON, Поз - 1);
						Значение = СтрЗаменить(Значение, """", "");
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					
				КонецЕсли;
				Попытка
					Результат.Вставить(ИмяЗначения, Значение);
				Исключение
					а=1;
				КонецПопытки;
			ИначеЕсли ТипДанных = "Массив" Тогда //обычное значение
				
				Поз = 0;
				
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					
					Символ = Сред(ТекстJSON, Сч, 1);
					
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						
						Поз = Сч;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Поз = 0 Тогда
					
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					
					Значение = Лев(ТекстJSON, Поз - 1);
					Значение = СтрЗаменить(Значение, """", "");
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
  
Функция СформироватьJSON(ОбъектДанных)Экспорт
	 Тип = ТипЗнч(ОбъектДанных);
	 
	 Если  Тип = Тип("Массив") ИЛИ Тип = Тип("ТаблицаЗначений") ИЛИ Тип = Тип("СписокЗначений") Тогда
		 Количество = ОбъектДанных.Количество();
		 Результат = "[";
		 
		 Для н = 0 ПО Количество - 1 Цикл
			 Результат = Результат + СформироватьJSON(ОбъектДанных[н]) + ?(н < Количество - 1, ", ", "");
		 КонецЦикла;
		 
		 Результат = Результат + "]";
		 Возврат Результат;
	 ИначеЕсли Тип = Тип("Структура") ИЛИ Тип = Тип("Соответствие") Тогда
		 н = 0;
		 Количество = ОбъектДанных.Количество();
		 Результат = "{";
		                                                      
		 Для Каждого КлючЗначение Из ОбъектДанных Цикл
			 Результат = Результат + СформироватьJSON(КлючЗначение.Ключ) + ": " + СформироватьJSON(КлючЗначение.Значение) + ?(н < Количество - 1, ", ", "");
			 н = н + 1;
		 КонецЦикла;
		 Результат = Результат + "}";
		 Возврат Результат;
		 
	 ИначеЕсли Тип = Тип("СтрокаТаблицыЗначений") Тогда
		 
		 Результат = "{";
		 Колонки = ОбъектДанных.Владелец().Колонки;
		 Количество = Колонки.Количество();
		 
		 Для н = 0 ПО Количество - 1 Цикл
			 Ключ = Колонки[н].Имя;
			 Результат = Результат + СформироватьJSON(Ключ) + ": " + СформироватьJSON(ОбъектДанных[Ключ]) + ?(н < Количество - 1, ", ", "");
		 КонецЦикла;
		 
		 Результат = Результат + "}";
		 Возврат Результат;
	 ИначеЕсли Тип = Тип("ЭлементСпискаЗначений") Тогда
		 Возврат СформироватьJSON(ОбъектДанных.Значение); 
	 ИначеЕсли Тип = Тип("Строка") Тогда
		 Результат = ОбъектДанных;
		 
		 Результат = СтрЗаменить(Результат, "\",          "\\");
		 //Символы уникода не нужно экранировать
		 Результат = СтрЗаменить(Результат, "\\u",          "\u");
		 Результат = СтрЗаменить(Результат, "/",          "\/");
		 Результат = СтрЗаменить(Результат, """",         "\""");
		 Результат = СтрЗаменить(Результат, Символы.ВК,   "\r");
		 Результат = СтрЗаменить(Результат, Символы.Таб,  "\t");
		 Результат = СтрЗаменить(Результат, Символы.ПС,   "\n");
		 
		 Возврат """" + Результат + """";	 
	 ИначеЕсли Тип = Тип("Число") Тогда
		 Возврат Формат(ОбъектДанных, "ЧРД=.; ЧН=0; ЧГ=0");	 
	 ИначеЕсли Тип = Тип("Булево") Тогда
		 Возврат Формат(ОбъектДанных, "БЛ=false; БИ=true"); 
	 ИначеЕсли Тип = Тип("Дата") Тогда
		 Возврат СформироватьJSON(Формат(ОбъектДанных, "ДФ=dd.MM.yyyy"));
	 ИначеЕсли ОбъектДанных = Неопределено ИЛИ ОбъектДанных = NULL Тогда
		 Возврат "null"; 
	 ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(Тип) Или Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		 Возврат СформироватьJSON(ОбъектДанных.УникальныйИдентификатор());
	 Иначе
		 Возврат СформироватьJSON(Строка(ОбъектДанных));
	 КонецЕсли;
 КонецФункции

Процедура ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,Ключ,ЧастьАдреса);
	Если ЗначениеЗаполнено(ЧастьАдреса) Тогда 
		ЧастьАдресаСтр = СокрЛП(СтрЗаменить(ЧастьАдреса,".",""));
	    ЧастьАдресаСпис = СтрЗаменить(ЧастьАдресаСтр," ",Символы.ПС);
		Если СтрЧислоСтрок(ЧастьАдресаСпис)>1 Тогда 
			Тип = СтрПолучитьСтроку(ЧастьАдресаСпис,СтрЧислоСтрок(ЧастьАдресаСпис));
			СтруктуруАдреса.Вставить(Ключ+"Type", Тип);
		    ЧастьАдресаСтр = СокрЛП(Лев(ЧастьАдресаСтр,СтрДлина(ЧастьАдресаСтр)-СтрДлина(Тип))); 
		КонецЕсли;
		СтруктуруАдреса.Вставить(Ключ, ЧастьАдресаСтр);
	КонецЕсли;	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт	
	МассивСтрок = Новый Массив();
	loop = true;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока loop Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока loop Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;		
КонецФункции

Функция ПолучитьСтруктуруКладрИзСтроки(Знач СтроковыйАдрес) Экспорт
	СтруктураАдреса=Неопределено;
	
	ЧислоВхожденийЗапятойВАдрес = СтрЧислоВхождений(СтроковыйАдрес, ","); 
	Если (ЧислоВхожденийЗапятойВАдрес = 9) ИЛИ (ЧислоВхожденийЗапятойВАдрес = 12) Тогда	
		Страна = "";
		Индекс = "";
		Регион = "";
		Район = "";
		Город = "";
		НаселенныйПункт = "";
		Улица ="";
		Дом ="";
		Корпус ="";
		Квартира ="";
		
		ТипДома ="";
		ТипКорпуса ="";
		ТипКвартиры ="";

		МассивАдрес	= РазложитьСтрокуВМассивПодстрок(СтроковыйАдрес);	
		ЭлементовВМассиве = МассивАдрес.Количество();   

		Если ЭлементовВМассиве	>	0	тогда
			Страна	=	СокрЛП(МассивАдрес[0]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	1	тогда
			Индекс	=	СокрЛП(МассивАдрес[1]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	2	тогда
			Регион	=	СокрЛП(МассивАдрес[2]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	3	тогда
			Район	=	СокрЛП(МассивАдрес[3]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	4	тогда
			Город	=	СокрЛП(МассивАдрес[4]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	5	тогда
			НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	6	тогда
			Улица	=	СокрЛП(МассивАдрес[6]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	7	тогда
			Дом	=	СокрЛП(МассивАдрес[7]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	8	тогда
			Корпус	=	СокрЛП(МассивАдрес[8]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	9	тогда
			Квартира	=	СокрЛП(МассивАдрес[9]);
		КонецЕсли;
		
	    //Расширенное представление
		Если ЭлементовВМассиве	>	10	тогда
			ТипДома	    = СокрЛП(МассивАдрес[10]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	11	тогда
			ТипКорпуса	= СокрЛП(МассивАдрес[11]);
		КонецЕсли;
		Если ЭлементовВМассиве	>	12	тогда
			ТипКвартиры = СокрЛП(МассивАдрес[12]);
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна",Страна);
		СтруктураАдреса.Вставить("Индекс",Индекс);
		СтруктураАдреса.Вставить("Регион",Регион);
		СтруктураАдреса.Вставить("Район",Район);
		СтруктураАдреса.Вставить("Город",Город);
		СтруктураАдреса.Вставить("НаселенныйПункт",НаселенныйПункт);
		СтруктураАдреса.Вставить("Улица",Улица);
		СтруктураАдреса.Вставить("Дом",Дом);
		СтруктураАдреса.Вставить("Корпус",Корпус);
		СтруктураАдреса.Вставить("Квартира",Квартира);
		СтруктураАдреса.Вставить("ТипДома",ТипДома);
		СтруктураАдреса.Вставить("ТипКорпуса",ТипКорпуса);
		СтруктураАдреса.Вставить("ТипКвартиры",ТипКвартиры);
	КонецЕсли;
		
	Возврат СтруктураАдреса;		
КонецФункции

Процедура ЗаполнитьСтруктуруАдресаИзСтроки(СтруктуруАдреса, СтроковыйАдрес)
	ДанныеСтроки = ПолучитьСтруктуруКладрИзСтроки(СтроковыйАдрес); 
	
	СтруктуруАдреса.Вставить("type","Адрес");	
	СтруктуруАдреса.Вставить("country",     "РОССИЯ");
	СтруктуруАдреса.Вставить("addressType", "Административно-территориальный");
	СтруктуруАдреса.Вставить("ZIPcode",     ДанныеСтроки.Индекс);
	
	ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,"area",ДанныеСтроки.Регион);
	ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,"district",ДанныеСтроки.Район);
	ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,"city",ДанныеСтроки.Город);
	ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,"locality",ДанныеСтроки.НаселенныйПункт);
	ЗаполнитьОписаниеЧастиАдреса(СтруктуруАдреса,"street",ДанныеСтроки.Улица);
		
	СтруктуруАдреса.Вставить("houseNumber",      ДанныеСтроки.Дом);
    СтруктуруАдреса.Вставить("houseType",      ДанныеСтроки.ТипДома);
	
	СтруктуруАдреса.Вставить("apartments", Новый Массив);
	Если ЗначениеЗаполнено(ДанныеСтроки.Улица) Тогда
		ВебКвартира = Новый Структура;
		ВебКвартира.Вставить("type","Квартира");
		ВебКвартира.Вставить("number", ДанныеСтроки.Квартира);
		СтруктуруАдреса.apartments.Добавить(ВебКвартира);
	КонецЕсли;	
	
	СтруктуруАдреса.Вставить("buildings", Новый Массив);
	Если ЗначениеЗаполнено(ДанныеСтроки.Корпус) Тогда	
		ВебКорпус        = Новый Структура;
		ВебКорпус.Вставить("type","Корпус");
		ВебКорпус.Вставить("number", ДанныеСтроки.Корпус);
		СтруктуруАдреса.buildings.Добавить(ВебКорпус);
	КонецЕсли;
КонецПроцедуры